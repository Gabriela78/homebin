#!/bin/bash
set -eu

scriptName="splashdown"
scriptBlurb="things to do when chromebook returns home"
scriptProject="https://github.com/vonbrownie/homebin"
scriptSrc="${scriptProject}/blob/master/${scriptName}"

mc="summanus.local" # 'mission control' 

testLibrary() {
# A library of functions for shell scripts
local libName="Library.sh"
local libSrc="${scriptProject}/blob/master/${libName}"
local lib="$HOME/bin/${libName}"
if [[ -e $lib ]]
then
    . $lib
else
    echo -e "\nI require '$lib' to do my magic."
    echo "SOURCE"
    echo -e "\t$libSrc"
    echo -e "Download script from above link and place in $HOME/bin.\n"
    exit 1
fi
}

scriptDetails() {
echo "$( penguinista ) .: $scriptName -- $scriptBlurb :."
echo "USAGE"
echo -e "\t$scriptName [OPTION]"
echo "OPTIONS"
echo -e "\t-h\tdescription and options"
echo -e "\t-m\t'mission control'"
echo "EXAMPLE"
echo -e "\tMission control has moved to alternate location:"
echo -e "\t\tsplashdown -m area51"
echo "SOURCE"
echo -e "\t<${scriptSrc}>\n"
}

runOptions() {
while getopts ":hm:" OPT
do
    case $OPT in
        h)
            scriptDetails
            exit 0
            ;;
        m)
            mc="$OPTARG"
            break
            ;;
        :)
            echoRed "$( penguinista ) .: Option '-$OPTARG' missing argument."
            exit 1
            ;;
        *)
            echoRed "$( penguinista ) .: Invalid option '-$OPTARG'."
            exit 1
            ;;
    esac
done
}

testPath() {
local require=(cryptsetup rsync myRsync ssh)
for i in ${require[@]}
do
    hash $i 2>/dev/null || \
        { echo -e >&2 "I require '$i' but it's not installed.\n"; \
            scriptDetails; exit 1; }
done
}

testMnt() {
local sdX="sdb1"
local crypt="${sdX}_crypt"
local map="/dev/mapper/$crypt"
local mnt="$HOME/USB"
if [[ ! -e $map ]]
then
    echoYellow "$( penguinista ) .: Setup $map ..."
    sudo cryptsetup luksOpen /dev/$sdX $crypt && mount $mnt
fi
if [[ ! $( mount | grep $mnt ) ]]; then mount $mnt; fi
}

showFS() {
echoYellow "$( penguinista ) .: Filesystems ..." && df -h
}

syncToDevice() {
local sync="$HOME/bin/myRsync -d"
local device="$mc:$HOME"
local path="$HOME/USB"
local dwnld="$path/Downloads"
local code="$path/code"
local doc="$path/doc"
local image="$path/image"
local share="$HOME/share"
echoYellow "$( penguinista ) .: Welcome home!" && sleep 4
echoYellow "$( penguinista ) .: Sync $HOME to $device ..." && \
    $sync -e Downloads/ -e NAS/ -e USB/ -e local/ -e share/ \
    $HOME/ $device/backup/$HOSTNAME/ && sync
echoYellow "$( penguinista ) .: Sync $dwnld to $device ..." && \
    $sync $dwnld/ $device/Downloads/ && sync
echoYellow "$( penguinista ) .: Sync $code to $device ..." && \
    $sync $code/ $device/code/ && sync
echoYellow "$( penguinista ) .: Sync $doc to $device ..." && \
    $sync -e unsorted/ $doc/ $device/doc/ && sync
echoYellow "$( penguinista ) .: Sync $image to $device ..." && \
    $sync $image/ $device/image/ && sync
echoYellow "$( penguinista ) .: Sync $share to $device ..." && \
    $sync $share/ $device/share/ && sync
}

configNAS() {
local client="sshfs -o idmap=user"
local nas="$mc:/media/crypt/dwa"
local mnt="$HOME/NAS"
echoYellow "$( penguinista ) .: Network Attached Storage ..."
if [[ ! $( mount | grep $mnt ) ]]
then
while :
do
    read -n 1 -p "Mount $nas -> $mnt? [Yn] > "
    if [[ $REPLY == [yY] || $REPLY == "" ]]
    then
        echoGreen "\nOK. Making it so ...\n"
        $client $nas $mnt
        break
    elif [[ $REPLY == [nN] ]]
    then
        echo -e "\nOK. Not mounted.\n"
        break
    else
        invalidReplyYN
    fi
done
else
    echoBlue "... is attached!"
fi
}

detachUSB() {
local sdX="sdb1"
local crypt="${sdX}_crypt"
local map="/dev/mapper/$crypt"
local mnt="$HOME/USB"
echoYellow "$( penguinista ) .: USB Storage ..."
while :
do
    read -n 1 -p "Deactivate crypto $mnt? [Yn] > "
    if [[ $REPLY == [yY] || $REPLY == "" ]]
    then
        echoGreen "\nOK. Making it so ...\n"
        umount $mnt && sudo cryptsetup luksClose $map
        break
    elif [[ $REPLY == [nN] ]]
    then
        echo -e "\nOK. No change.\n"
        break
    else
        invalidReplyYN
    fi
done
}

#: START
testLibrary
runOptions "$@"
testPath
testMnt
testConnect
syncToDevice
configNAS
detachUSB
showFS
auRevoir
